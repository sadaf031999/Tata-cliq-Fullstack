{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getReactNodeRef;\nvar React = _interopRequireWildcard(require(\"react\"));\n/**\n * Returns the ref of a React node handling differences between React 19 and older versions.\n * It will return null if the node is not a valid React element.\n *\n * @param element React.ReactNode\n * @returns React.Ref<any> | null\n *\n * @deprecated Use getReactElementRef instead\n */\nfunction getReactNodeRef(element) {\n  if (!element || ! /*#__PURE__*/React.isValidElement(element)) {\n    return null;\n  }\n\n  // 'ref' is passed as prop in React 19, whereas 'ref' is directly attached to children in older versions\n  return element.props.propertyIsEnumerable('ref') ? element.props.ref :\n  // @ts-expect-error element.ref is not included in the ReactElement type\n  // We cannot check for it, but isValidElement is true at this point\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/70189\n  element.ref;\n}","map":{"version":3,"names":["_interopRequireWildcard","require","default","Object","defineProperty","exports","value","getReactNodeRef","React","element","isValidElement","props","propertyIsEnumerable","ref"],"sources":["C:/react_app/cliq project/tata cliq frontend/node_modules/@mui/utils/getReactNodeRef/getReactNodeRef.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getReactNodeRef;\nvar React = _interopRequireWildcard(require(\"react\"));\n/**\n * Returns the ref of a React node handling differences between React 19 and older versions.\n * It will return null if the node is not a valid React element.\n *\n * @param element React.ReactNode\n * @returns React.Ref<any> | null\n *\n * @deprecated Use getReactElementRef instead\n */\nfunction getReactNodeRef(element) {\n  if (!element || ! /*#__PURE__*/React.isValidElement(element)) {\n    return null;\n  }\n\n  // 'ref' is passed as prop in React 19, whereas 'ref' is directly attached to children in older versions\n  return element.props.propertyIsEnumerable('ref') ? element.props.ref :\n  // @ts-expect-error element.ref is not included in the ReactElement type\n  // We cannot check for it, but isValidElement is true at this point\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/70189\n  element.ref;\n}"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAA+C,CAAC,CAACC,OAAO;AAC9FC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACH,OAAO,GAAGK,eAAe;AACjC,IAAIC,KAAK,GAAGR,uBAAuB,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,eAAeA,CAACE,OAAO,EAAE;EAChC,IAAI,CAACA,OAAO,IAAI,EAAE,aAAaD,KAAK,CAACE,cAAc,CAACD,OAAO,CAAC,EAAE;IAC5D,OAAO,IAAI;EACb;;EAEA;EACA,OAAOA,OAAO,CAACE,KAAK,CAACC,oBAAoB,CAAC,KAAK,CAAC,GAAGH,OAAO,CAACE,KAAK,CAACE,GAAG;EACpE;EACA;EACA;EACAJ,OAAO,CAACI,GAAG;AACb","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}